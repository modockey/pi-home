// Code generated by go-swagger; DO NOT EDIT.

package authorizer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/modockey/pi-home/photo-award/gen/models"
)

// GetAuthorizeHandlerFunc turns a function with the right signature into a get authorize handler
type GetAuthorizeHandlerFunc func(GetAuthorizeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAuthorizeHandlerFunc) Handle(params GetAuthorizeParams) middleware.Responder {
	return fn(params)
}

// GetAuthorizeHandler interface for that can handle valid get authorize params
type GetAuthorizeHandler interface {
	Handle(GetAuthorizeParams) middleware.Responder
}

// NewGetAuthorize creates a new http.Handler for the get authorize operation
func NewGetAuthorize(ctx *middleware.Context, handler GetAuthorizeHandler) *GetAuthorize {
	return &GetAuthorize{Context: ctx, Handler: handler}
}

/*
	GetAuthorize swagger:route GET /authorize authorizer getAuthorize

authorize user by id, password
*/
type GetAuthorize struct {
	Context *middleware.Context
	Handler GetAuthorizeHandler
}

func (o *GetAuthorize) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAuthorizeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetAuthorizeOKBody get authorize o k body
//
// swagger:model GetAuthorizeOKBody
type GetAuthorizeOKBody struct {

	// schema
	Schema models.Token `json:"schema,omitempty"`
}

// Validate validates this get authorize o k body
func (o *GetAuthorizeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSchema(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAuthorizeOKBody) validateSchema(formats strfmt.Registry) error {
	if swag.IsZero(o.Schema) { // not required
		return nil
	}

	if err := o.Schema.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getAuthorizeOK" + "." + "schema")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("getAuthorizeOK" + "." + "schema")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get authorize o k body based on the context it is used
func (o *GetAuthorizeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSchema(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAuthorizeOKBody) contextValidateSchema(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(o.Schema) { // not required
		return nil
	}

	if err := o.Schema.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getAuthorizeOK" + "." + "schema")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("getAuthorizeOK" + "." + "schema")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAuthorizeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAuthorizeOKBody) UnmarshalBinary(b []byte) error {
	var res GetAuthorizeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
