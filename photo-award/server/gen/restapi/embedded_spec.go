// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "Web API Used By 'PHOTO-AWARD'",
    "title": "photo award",
    "contact": {
      "email": "akira.nakagawa.kmdk@gmail.com"
    },
    "version": "1.0.0"
  },
  "basePath": "/v1",
  "paths": {
    "/albums": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "get user's albums",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "album"
        ],
        "responses": {
          "200": {
            "description": "user's albums",
            "schema": {
              "$ref": "#/definitions/Albums"
            }
          },
          "401": {
            "$ref": "#/definitions/UnauthorizedError"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "create new album",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "album"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "create new album success",
            "schema": {
              "properties": {
                "url": {
                  "type": "string",
                  "format": "url"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/UnauthorizedError"
          },
          "403": {
            "description": "user not allowed to access this API"
          }
        }
      }
    },
    "/albums/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "get specified album's info",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "album"
        ],
        "operationId": "getAlbumsById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "album's info"
          },
          "401": {
            "$ref": "#/definitions/UnauthorizedError"
          },
          "403": {
            "description": "user not allowed to access this API"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "upload picture to specified album",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "album"
        ],
        "operationId": "postPhoto",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "photo",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Photo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "album's info"
          },
          "401": {
            "$ref": "#/definitions/UnauthorizedError"
          },
          "403": {
            "description": "user not allowed to access this API"
          }
        }
      }
    },
    "/authorize": {
      "get": {
        "description": "authorize user by id, password",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "authorizer"
        ],
        "parameters": [
          {
            "name": "login_info",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "aurhorize ok and returns token",
            "schema": {
              "properties": {
                "schema": {
                  "$ref": "#/definitions/Token"
                }
              }
            }
          },
          "401": {
            "description": "authentification failed"
          }
        }
      }
    },
    "/system/version": {
      "get": {
        "description": "Get API Version",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "api version",
            "schema": {
              "$ref": "#/definitions/Version"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Album": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "photos": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "url"
          }
        }
      }
    },
    "Albums": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Album"
      }
    },
    "Login": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Photo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "photo": {
          "type": "string",
          "format": "binary"
        }
      }
    },
    "Token": {
      "type": "string"
    },
    "UnauthorizedError": {
      "description": "Authentication information is missing or invalid"
    },
    "Version": {
      "description": "API Version(SemVer)",
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "format": "/^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "description": "access token for api publicated by /authorize",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "name": "system"
    },
    {
      "name": "album"
    },
    {
      "name": "authorizer"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "Web API Used By 'PHOTO-AWARD'",
    "title": "photo award",
    "contact": {
      "email": "akira.nakagawa.kmdk@gmail.com"
    },
    "version": "1.0.0"
  },
  "basePath": "/v1",
  "paths": {
    "/albums": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "get user's albums",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "album"
        ],
        "responses": {
          "200": {
            "description": "user's albums",
            "schema": {
              "$ref": "#/definitions/Albums"
            }
          },
          "401": {
            "description": "Authentication information is missing or invalid"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "create new album",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "album"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "create new album success",
            "schema": {
              "properties": {
                "url": {
                  "type": "string",
                  "format": "url"
                }
              }
            }
          },
          "401": {
            "description": "Authentication information is missing or invalid"
          },
          "403": {
            "description": "user not allowed to access this API"
          }
        }
      }
    },
    "/albums/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "get specified album's info",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "album"
        ],
        "operationId": "getAlbumsById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "album's info"
          },
          "401": {
            "description": "Authentication information is missing or invalid"
          },
          "403": {
            "description": "user not allowed to access this API"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "upload picture to specified album",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "album"
        ],
        "operationId": "postPhoto",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "photo",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Photo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "album's info"
          },
          "401": {
            "description": "Authentication information is missing or invalid"
          },
          "403": {
            "description": "user not allowed to access this API"
          }
        }
      }
    },
    "/authorize": {
      "get": {
        "description": "authorize user by id, password",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "authorizer"
        ],
        "parameters": [
          {
            "name": "login_info",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "aurhorize ok and returns token",
            "schema": {
              "properties": {
                "schema": {
                  "$ref": "#/definitions/Token"
                }
              }
            }
          },
          "401": {
            "description": "authentification failed"
          }
        }
      }
    },
    "/system/version": {
      "get": {
        "description": "Get API Version",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "api version",
            "schema": {
              "$ref": "#/definitions/Version"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Album": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "photos": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "url"
          }
        }
      }
    },
    "Albums": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Album"
      }
    },
    "Login": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Photo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "photo": {
          "type": "string",
          "format": "binary"
        }
      }
    },
    "Token": {
      "type": "string"
    },
    "UnauthorizedError": {
      "description": "Authentication information is missing or invalid"
    },
    "Version": {
      "description": "API Version(SemVer)",
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "format": "/^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "description": "access token for api publicated by /authorize",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "name": "system"
    },
    {
      "name": "album"
    },
    {
      "name": "authorizer"
    }
  ]
}`))
}
