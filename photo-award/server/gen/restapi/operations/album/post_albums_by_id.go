// Code generated by go-swagger; DO NOT EDIT.

package album

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostAlbumsByIDHandlerFunc turns a function with the right signature into a post albums by Id handler
type PostAlbumsByIDHandlerFunc func(PostAlbumsByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAlbumsByIDHandlerFunc) Handle(params PostAlbumsByIDParams) middleware.Responder {
	return fn(params)
}

// PostAlbumsByIDHandler interface for that can handle valid post albums by Id params
type PostAlbumsByIDHandler interface {
	Handle(PostAlbumsByIDParams) middleware.Responder
}

// NewPostAlbumsByID creates a new http.Handler for the post albums by Id operation
func NewPostAlbumsByID(ctx *middleware.Context, handler PostAlbumsByIDHandler) *PostAlbumsByID {
	return &PostAlbumsByID{Context: ctx, Handler: handler}
}

/*
	PostAlbumsByID swagger:route POST /albums/{id} album postAlbumsById

upload picture to specified album
*/
type PostAlbumsByID struct {
	Context *middleware.Context
	Handler PostAlbumsByIDHandler
}

func (o *PostAlbumsByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostAlbumsByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
