// Code generated by go-swagger; DO NOT EDIT.

package album

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostAlbumsIDHandlerFunc turns a function with the right signature into a post albums ID handler
type PostAlbumsIDHandlerFunc func(PostAlbumsIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAlbumsIDHandlerFunc) Handle(params PostAlbumsIDParams) middleware.Responder {
	return fn(params)
}

// PostAlbumsIDHandler interface for that can handle valid post albums ID params
type PostAlbumsIDHandler interface {
	Handle(PostAlbumsIDParams) middleware.Responder
}

// NewPostAlbumsID creates a new http.Handler for the post albums ID operation
func NewPostAlbumsID(ctx *middleware.Context, handler PostAlbumsIDHandler) *PostAlbumsID {
	return &PostAlbumsID{Context: ctx, Handler: handler}
}

/*
	PostAlbumsID swagger:route POST /albums/[id] album postAlbumsId

upload picture to specified album
*/
type PostAlbumsID struct {
	Context *middleware.Context
	Handler PostAlbumsIDHandler
}

func (o *PostAlbumsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostAlbumsIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
